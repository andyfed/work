






Руководство пользователя программы
Репозиторий автора https://github.com/andyfed
 

Предисловие

Данное руководство предназначено для широкого круга лиц: 
1.	обычных пользователей, обладающих минимумом знаний по работе в ОС Windows 10, необходимых для совершения действий из данного руководства, или способных их найти в интернете и специализированной литературе
2.	продвинутых пользователей, обладающих навыками работы в операционной системе Windows 10, в том числе с консольными приложениями и скриптами
3.	системных администраторов, осуществляющих возможную отладку работы программы в конкретной среде, инженеров ПО и пр.
Если вы уже пользовались ранее подобными программами и обладаете продвинутыми пользовательскими навыками работы, а также имеете представление о назначении программы, то можете пропустить любой технический раздел. Оглавление поможет точечно найти ответ на интересующий вас вопрос.
Если же вы не чувствуете в себе уверенности в технических навыках, то рекомендуется прочесть это руководство по возможности полностью.
 
Оглавление

Предисловие	2
Оглавление	3
Раздел А: Введение	4
I. Назначение	4
II. Выполняемые функции	4
III. Ограничения	6
Раздел В: Общая информация	6
I. Допустимые элементы входных данных	6
II. Имеющиеся в наличии виды обработки	7
III. Ограничения	7
IV. Выходные данные	7
V. Управляющие директивы диалоговой операционной системы	8
VI. Управляющие директивы для оборудования/программы	8
VII. Организация входного потока	9
Раздел С: Выполнение задания	9
I. Начало диалоговых операций	9
II. Загрузка/запуск программы (название диалоговой программы)	10
III. Ввод входных данных	11
IV. Процедура обработки ошибок	11
VI. Изменение входных данных	12
VII. Прерывание программы	12
VIII. Повторный запуск программы	12
IX. Получение выходных данных	13
Х. Завершение работы	13
XI. Окончание диалоговых операций	13
Приложение: Сообщения системы	13
Словарь терминов	14


Раздел А: Введение

I. Назначение

Симулятор нормальных алгоритмов Маркова – реализует обработку текстовой строки (обрабатываемая строка) по набору правил. 
Число правил – произвольное, правила упорядочены. 
Каждое правило определяет текстовую подстановку и состоит из двух строк (строка – как тип данных). 

Первая строка (левая часть) определяет заменяемую подстроку (как набор символов). 
Вторая строка (правая часть) задает, на какую она заменяется.  

Исполнение происходит до неприменимости, т.е. того момента, когда в обрабатываемой строке нет ни одной подстроки, которая совпадает с одной из строк из левых частей правил. 
Применение правила заключается в следующих функциях:
•	поиске вхождения его левой части в обрабатываемую строку 
•	замене соответствующей подстроки на правую часть правила. 
Если таких вхождений несколько, то заменяется только первое вхождение. Если вхождений нет, то правило – неприменимо. 
Применение правил идет следующим образом:
1.	Берется первое правило и пытается примениться. 
2.	Если оно неприменимо, берется следующее правило. И так происходит либо до выхода по неприменимости, либо до первого применимого правила. 
3.	После того, как применимое правило сработало, все начинается сначала – с первого правила.


II. Выполняемые функции

В минимальном виде симулятор – это утилита, которой в качестве параметров передается имя входного файла c исходной строкой, имя выходного файла с результирующей строкой, имя файла с правилами. 
Программа 
1) считывает входные параметры и проверяет их корректность, 
2) открывает исходный файл и файл с правилами, обрабатывая возможные ошибочные ситуации, 
3) производит поиск и применение подстановок, 
4) записывает результат в результирующий файл и завершает работу.

Набор правил, синтаксис их записи и вид исходной строки выбирается по собственному усмотрению пользователя.
Пример:
Обрабатываемая строка:
AAAAEEabbbb

Правила:
AE -> ggg
A -> b
bg -> X

Промежуточные и конечный результаты будут такими:
1.	AAAgggEabbbb
2.	bAAgggEabbbb
3.	bbAgggEabbbb
4.	bbbgggEabbbb
5.	bbXggEabbbb

После введения пользователем команды на запуск программы, все действия выполняются программой автоматически.

III. Ограничения

Программа не имеет ограничений по техническому уровню пользователей при условии ознакомления с данной инструкцией и понимания прочитанного. Если после прочтения у вас остаются вопросы, вы можете попробовать найти ответ самостоятельно в сети интернет. 
Программа не имеет ограничений по возрасту. Использование программы допускается для пользователей на свой страх и риск – как есть. Какие-либо гарантии со стороны разработчика отсутствуют.
Программа имеет открытый исходный код, опубликованный на GitHub. Лицензия на использование не требуется. Использование допускается в любых, в том числе и коммерческих целях, с обязательным указанием авторства. Исключение составляет продажа программы в целях получения прибыли: не допускается продажа программы в любом виде (исходного кода или исполняемого файла, включая документацию и пр.). Модификация для собственных нужд допускается свободно без разрешения автора.

Раздел В: Общая информация

I. Допустимые элементы входных данных

Формат данных в файлах на жестких дисках как указан в предыдущем разделе. Символы латинского алфавита и арабские цифры в виде единой строки (набор ASCII символов без знаков переноса строки). Кодировка текстовых файлов – в UTF-8. Если не уверены в правильном формате ввода данных, то можете найти соответствующую информацию в интернете или протестировать выполнение программы. Если программа выдает сообщение об ошибке, прочтите его, чтобы устранить соответствующие недостатки. Все сообщения программа выдает на английском языке. В случае недостаточно уровня знаний языка, пользователю рекомендуется использовать открытые системы автоматического перевода (например https://translate.google.com/ )
До запуска программы следует заранее создать 4 необходимых для работы файла текстового формата - .txt
Редактирование таких файлов возможно любым стандартным встроенным в ОС редактором (например «Блокнот») или иным по усмотрению пользователя.
Правила в файле разделяются символом переноса строки.
Разделение на правую и левую часть правила производится двумя символами " -> " («минус», «больше»), что выглядит как однонаправленная стрелка. Знаки пробелов до и после левой-правой частей правил не учитываются.

II. Имеющиеся в наличии виды обработки

Единственной основной функцией программы является замена наборов символов в источниках и по правилам указанных пользователем. 
Дополнительной функцией является подсчет произведенных замен и времени, затраченного на основную функцию программы.
Иных, в том числе скрытых, функций и задач программа не имеет.

III. Ограничения

Программа предназначена для запуска в среде исполнения операционной системы Windows. Тестирование производилось на операционной системе Windows 10. Так как Windows обычно имеет обратную совместимость и опцию запуска в режиме совместимости с предыдущими версиями ОС, то проблем не должно возникать и с прочими версиями ОС Windows.
Запуск осуществляется только посредством введения данных в командную строку Windows. При наличии у вас соответствующих знаний, возможно написание bash-скрипта, чтобы сэкономить время на введение аргументов запуска. При отсутствии таких навыков, вводите команды вручную или обратитесь к вашему системному администратору.
Единственные иные технические ограничения разобраны в части I данного раздела.
При наличии соответствующих знаний, допускается перекомпилирование программы под операционные системы *NIX-типа.

IV. Выходные данные

Выходные данные представляются программой и сохраняются в текстовом формате строки в кодировке UTF-8.
Финальный вариант применения всех правил (до момента их полной неприменимости) над обрабатываемой строкой сохранятся в файл с указанным пользователем именем и расширением файла  .txt
Иные форматы и кодировки могут вызывать непредвиденные ошибки в работе программы.

V. Управляющие директивы диалоговой операционной системы

указание буквы диска со знаком двоеточия – переключение на соответствующий диск
cd – меняет текущую директорию на указанную
пример:
 
java – указание что необходимо запустить файл в среде исполнения JVM (Java virtual machine) 
-jar – аргумент обозначающий тип исполняемого файла в JVM
Более подробная информация о команде jar https://docs.oracle.com/en/java/javase/14/docs/specs/man/jar.html

VI. Управляющие директивы для оборудования/программы

Стандартной командой для запуска в КС является (без кавычек, скобок и прочих лишних символов):
java -jar [путь к .jar файлу] [аргумент 1] [аргумент 2] [аргумент 3] [аргумент 4]
Где аргументы являются путями к файлам для работы программы:
[аргумент 1] файл для чтения с исходной строкой для обработки
[аргумент 2] файл для чтения с набором правил
[аргумент 3] файл для сохранения итоговой строки
[аргумент 4] файл для сохранения технической информации

Альтернативой может быть переход заранее в рабочую папку и запуск исполняемого файла оттуда.
 


VII. Организация входного потока

Входной поток данных реализован путем чтения файлов из указанных пользователем директорий. Чтение первого аргумента осуществляется единой строкой. 
Чтение второго аргумента осуществляется построчно (одна строка – одно правило).
Поэтому не допускается иного формата ввода.


Раздел С: Выполнение задания

Форматы и подробные объяснения всех управляющих директив операционной системы или программы содержатся в разделе В
Объяснения и ответы (если они вообще существуют) на все сообщения, генерируемые системой, или программой, содержатся в приложении в конце инструкции.

I. Начало диалоговых операций

Для использования программы понадобится командная строка (КС) или иная системная утилита, эмулирующая терминал используемой ОС.

 
Для работы программы необходимо указать в качестве аргументов абсолютные пути к файлам на жестких дисках или иных постоянных накопителях данных.
Так же следует обратить внимание, что в ОС Windows для указания путей используется символ «обратного слэша»
Необходимо учесть, что в вашей ОС может быть не настроена системная переменная PATH для подобных команд. В случае возникновения подобных ошибок обратитесь к вашему системному администратору или найдите инструкцию по изменению PATH в интернете.


II. Загрузка/запуск программы (название диалоговой программы)

Запуск jar-файла двойным щелчком так же запустит исполнение этого файла в JVM. Необходимо чтобы формат jar был ассоциирован в ОС c JVM, а не с утилитами-архиваторами, поскольку jar является одновременно и форматом архива (может быть открыт при помощи WinRar, Zip и т.п.).
 
Но необходимые для работы аргументы при таком запуске не будут указаны. Таким образом программа завершится с ошибкой. 
Возможен довольно простой вариант модификации, когда программа работает с заранее обозначенными путями файлов. Обычно для таких целей может быть создана папка resources в jar-архиве и прописаны относительные пути. Или возможно жестко привязать к файлам в определенных директориях, если программа будет работать только в заранее определенной среде (например, на локальном сервере или определенном ПК). Для таких модификаций потребуется внести небольшие изменения в код программы, то есть потребуется навык программирования на Java. Подобные варианты эффективно использовались при тестировании программы, но не вошли в финальный релиз, поскольку задача заказчика не отражала такую потребность.
Управляющие директивы в данном случае совпадают с указанными в разделе VI. Управляющие директивы для оборудования/программы

III. Ввод входных данных

Ввод входных данных можно условно разделить на предварительный этап и непосредственно передачу данных для ввода.
Предварительный этап – это сохранение всех необходимых данных в текстовых файлах в необходимых форматах как указано в разделе B
Передача данных для ввода – это указание 4-х аргументов при запуске в КС.
IV. Процедура обработки ошибок

В программе используется система исключений (Exceptions), встроенная в среду языка программирования Java. То есть программа обрабатывает наиболее вероятные ошибки и продолжает работать, выдавая сообщения о проблемах в диалоговом окне терминала. В то же время, невозможно предусмотреть все ситуации с возможными ошибками. Так что возможно некорректное завершение программы. В этом случае вы можете сами проанализировать что вызывает данную ошибку или обратиться к своему системному администратору.

VI. Изменение входных данных

Программа не поддерживает изменение входных данных в процессе работы. Для изменения этих данных необходимо убедиться, что программа не запущена, открыть рабочие текстовые файлы, внести необходимые изменения, сохранить их и закрыть.

VII. Прерывание программы

Завершение работы командой строки/терминала возможно командой exit или простым закрытием окна.
Программа автоматически завершает свою работу при выполнении последней операции (запись в файлы). И не требует специальной команды завершения.
Завершить диалог через терминал требуется отдельно, так как программа не завершает его работу автоматически.
Экстренный выход или случайное закрытие терминала во время работы программы потребует заново запустить ее для того, чтобы получить корректный результат работы.
Если при корректном запуске происходит завершение программы и терминал выдает код, содержащий "return 1", то возможно исходный код программы был поврежден, либо модифицирован некорректным образом. В этом случае рекомендуется повторно скачать оригинальный архив или отменить изменения, произведенные вами в коде программы.

VIII. Повторный запуск программы

Повторный запуск возможен в том же диалоговом окне, например с указанием других путей к файлам в качестве аргументов.
Повторный запуск аналогичен описанному первоначальному запуску.
IX. Получение выходных данных

Выходные данные содержатся в файлах, указанных соответственно в 3 и 4 аргументе запуска программы. 
Формат аналогичен входным данным: текстовая строка в кодировке UTF-8 и техническая информация о работе программы (количество произведенных операций замен, общее время обработки строки в миллисекундах).

Х. Завершение работы

Программа не требует команды завершения и завершает работу автоматически после произведения последней операции.

XI. Окончание диалоговых операций

Окончание диалоговых операций в среде терминала описано в разделе VII. Прерывание программы

Приложение: Сообщения системы

Возможно 2 типа сообщений системы: 
1.	связанные с работой только терминала как части ОС
2.	связанные с работой программы
Первый тип проблем вам придется решить самостоятельно при помощи поиска в интернете, специальной литературы и вашего системного администратора.
Программа может выдавать следующие исключения / ошибки:
ошибки чтения
•	"Can't read input file: " + системное сообщение
•	"Can't read Rules.txt : " + системное сообщение
ошибки записи
•	"Smth goes wrong with output file: "  + системное сообщение
•	"Smth goes wrong with Info file: "  + системное сообщение
В случае подобных ошибок необходимо проверить правильность ввода соответствующего пути к файлу, тип которого указан в сообщении. Так же возможна ошибка отсутствия данного файла или, возможно, тот тип слэш-разделителя, неверную букву диска и т.п. 
Если вы указали не все аргументы, то получите сообщение, содержащее подобную информацию
 
В случае ошибок на чтение или NullPointerException так же рекомендовано проверить присутствуют ли сохраненные данные в указанных вами файлах (аргумент 1 и 2) и правильный ли они имеют формат.

Словарь терминов

ОС / операционная система – В данном случае речь идет преимущественно о работе в ОС Windows 10 и подобных ей.
КС / терминал – в ОС Windows 10 на данный момент нет работающего терминала и доступ осуществляется посредством утилиты системной командной строки. Ее вызов осуществляется через меню Пуск: введите при открытом меню на английской раскладке cmd и утилита появится в меню.
JVM /Java virtual machine – среда исполнения внутри ОС всех совместимых с ней файлов, написанных на семействе языков Java/Kotlin/Scala и пр. Должна быть установлена в вашей ОС, но обычно устанавливается и обновляется автоматически в современной Windows 10.
Exception / исключение – метод обработки ошибки программы без ее некорректного завершения с выдачей системного сообщения. Помогает вам понять, что именно вы делаете не так или даже что-то исправить в процессе.
